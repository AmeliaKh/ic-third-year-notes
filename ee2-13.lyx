#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass paper
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a5paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1.2cm
\rightmargin 1cm
\bottommargin 1.2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle empty
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
EE2-13 Computer Architecture II
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Instruction set architecture
\end_layout

\begin_layout Standard
Separates software and hardware.
\end_layout

\begin_layout Itemize

\emph on
Instruction
\emph default
: vector of bits, must be decoded before executon.
\end_layout

\begin_layout Paragraph
MIPS architecture
\end_layout

\begin_layout Itemize

\emph on
RISC
\emph default
 (reduced instruction set computer) architecture with 
\emph on
three instruction types
\emph default
.
\end_layout

\begin_layout Itemize

\emph on
32 registers
\emph default
, with $0 wired to 0, all others general purpose.
\end_layout

\begin_layout Itemize

\emph on
Register-register
\emph default
 / 
\emph on
load-store
\emph default
 architecture:
\end_layout

\begin_deeper
\begin_layout Itemize
Most instructions only involve registers.
 E.g.
 
\family typewriter
add $1, $2, $3
\family default
.
\end_layout

\begin_layout Itemize

\emph on
Data transfer instructions
\emph default
.
 E.g.
 
\family typewriter
lw $8, Astart($19)
\family default
.
\end_layout

\begin_deeper
\begin_layout Itemize
Memory is 
\emph on
big-endian
\emph default
 and access must be 
\emph on
word-aligned
\emph default
.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Aim to minimise memory access (may be multi-cycle: slow, non-determinstic).
\end_layout

\begin_layout Paragraph
Representing instructions
\end_layout

\begin_layout Standard
Three formats.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/mips-instructions.png
	width 100text%

\end_inset


\end_layout

\begin_layout Section
Data and control paths
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/data-control-path.png
	width 100col%

\end_inset


\end_layout

\begin_layout Itemize

\emph on
Key idea
\emph default
: combine datapaths when possible, add control to select.
\end_layout

\begin_layout Itemize
A single cycle implementation like this is inefficient: longest path (load
 instruction) determines clock cycle.
\end_layout

\begin_layout Section
Computer arithmetic
\end_layout

\begin_layout Subsubsection*
ALU Design
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/alu0.png
	width 50col%

\end_inset


\begin_inset Graphics
	filename img/alu31.png
	width 50col%

\end_inset


\end_layout

\begin_layout Itemize
Group components together to form larger repeated unit (less wires crossing,
 shorter paths).
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/full-alu.png
	width 70col%

\end_inset


\end_layout

\begin_layout Paragraph
ALU Performance
\end_layout

\begin_layout Itemize
Speed limited by propagation delay through slowest combinatorial path:
\end_layout

\begin_deeper
\begin_layout Itemize
Need to ensure no combinatorial loop.
\end_layout

\begin_layout Itemize
Slowest path usually a carry chain.
\end_layout

\begin_layout Itemize
Max clock rate 
\begin_inset Formula $\approx$
\end_inset

 1 / delay of slowest path.
\end_layout

\end_deeper
\begin_layout Paragraph
Addition and Subtraction
\end_layout

\begin_layout Itemize
Use a full adder.
\end_layout

\begin_layout Itemize

\emph on
Subtraction
\emph default
: negate operand by inverting and adding carry of 1.
\end_layout

\begin_layout Itemize

\emph on
Detecting overflow
\emph default
: 
\begin_inset Formula $A,B>0$
\end_inset

 but 
\begin_inset Formula $A+B\leq0$
\end_inset

 
\emph on
or
\emph default
 
\begin_inset Formula $A,B<0$
\end_inset

 but 
\begin_inset Formula $A+B\geq0$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
MIPS generates an 
\emph on
exception
\emph default
.
 Address of the instruction that overflowed is saved in a register, and
 the computer jumps to a predefined address.
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
Carry-select adder
\emph default
: for faster addition:
\end_layout

\begin_deeper
\begin_layout Itemize
Compute for both 
\begin_inset Formula $c=0$
\end_inset

 and 
\begin_inset Formula $c=1$
\end_inset

 after 
\begin_inset Formula $n$
\end_inset

 stages.
\end_layout

\begin_layout Itemize
Use multiplexer to choose based on actual 
\begin_inset Formula $c$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Subsubsection*
Multiplication
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/multiply.png
	width 60col%

\end_inset


\end_layout

\begin_layout Enumerate
Multiplier initally placed in the right half of product reg.
\end_layout

\begin_layout Enumerate
If least significant bit is 0, add multiplicand to left half of product
 reg.
\end_layout

\begin_layout Enumerate
Shift product reg right by 1 bit.
\end_layout

\begin_layout Paragraph
Booth's Algorithm
\end_layout

\begin_layout Itemize
Replace summing 
\begin_inset Formula $m+2m+\dots+2^{k-1}m$
\end_inset

 with 
\begin_inset Formula $2^{k}m-m$
\end_inset

.
\end_layout

\begin_layout Itemize
Replaces 
\begin_inset Formula $k$
\end_inset

 additions with 1 subtraction and 1 addition (and 
\begin_inset Formula $k$
\end_inset

 shifts).
 
\end_layout

\begin_layout Itemize
E.g.
 
\begin_inset Formula $001\:111_{2}\times101_{2}=2^{4}\times101_{2}-101_{2}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Division
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/divide.png
	width 60col%

\end_inset


\end_layout

\begin_layout Enumerate
Subtract divisor from remainder.
\end_layout

\begin_layout Enumerate
Shift the quotient to left.
 Set the least significant bit of the quotient to 1 if remainder was positive
 or 0 if it was negative.
\end_layout

\begin_layout Enumerate
If the remainder is negative, add the divisor back to it.
\end_layout

\begin_layout Enumerate
Shift the divisor right.
\end_layout

\begin_layout Itemize

\emph on
Signed division
\emph default
: remove signs and add them back.
\end_layout

\begin_layout Section
ISA design approaches
\end_layout

\begin_layout Enumerate

\emph on
CISCs
\emph default
: complex instruction set computers.
\end_layout

\begin_deeper
\begin_layout Itemize
Powerful instruction set with variable format.
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Dense code.
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Only needs simple compiler.
\end_layout

\end_deeper
\begin_layout Enumerate

\emph on
RISCs
\emph default
: reduced instruction set computers.
\end_layout

\begin_deeper
\begin_layout Itemize
Simple instructions with fixed format.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Increased instruction count.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Increased code size.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Requires optimising compiler.
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Reduced CPI and cycle time.
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Simple implementation:
\end_layout

\begin_deeper
\begin_layout Itemize
Adapts well to new technology.
\end_layout

\begin_layout Itemize
Fast/cheap development.
\end_layout

\begin_layout Itemize
Greater confidence in hardware correctness.
\end_layout

\begin_layout Itemize
Smaller chip size/cheaper to manufacture.
\end_layout

\end_deeper
\end_deeper
\begin_layout Paragraph
Architectures
\end_layout

\begin_layout Enumerate

\emph on
Stack
\emph default
.
 Operands specified implicitly at top of stack.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Dense code.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Less flexible: no random access.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Slow if stack in memory.
\end_layout

\end_deeper
\begin_layout Enumerate

\emph on
Accumulator
\emph default
.
 One operand in accumulator register.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Faster than stack architecture.
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Only one register (cheap).
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Instructions still short.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Frequent memory access still slow.
\end_layout

\end_deeper
\begin_layout Enumerate

\emph on
Register
\emph default
.
 Explicit register operands.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Faster than memory and we reduce memory traffic.
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Compiler friendly.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 High instruction count.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Instructions long (must name all operands).
\end_layout

\end_deeper
\begin_layout Section
Performance
\end_layout

\begin_layout Itemize

\emph on
CPI
\emph default
: clock cycles per instruction
\end_layout

\begin_deeper
\begin_layout Itemize
Varies based on program and ISA implementation.
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
Clock period
\emph default
: 1 
\begin_inset Formula $/$
\end_inset

 clock rate.
\end_layout

\begin_layout Itemize

\emph on
Num cycles for 
\begin_inset Formula $P$
\end_inset

:
\emph default
 num instructions for 
\begin_inset Formula $P$
\end_inset

 
\begin_inset Formula $\times$
\end_inset

 CPI.
\end_layout

\begin_layout Itemize

\emph on
Execution time for 
\begin_inset Formula $P$
\end_inset


\emph default
: clock period 
\begin_inset Formula $\times$
\end_inset

 num cycles for 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\text{Exec. time}=\text{Instr. count}\times\text{CPI}\times\text{Cycle time}
\]

\end_inset


\end_layout

\begin_layout Itemize
Check dimensions!
\end_layout

\begin_layout Standard

\emph on
MIPS
\emph default
: millions of instructions per second.
\end_layout

\begin_layout Itemize
Doesn't take instruction count into account!
\end_layout

\begin_layout Paragraph
Power
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\text{Power}\propto\text{Capcitive load}\times\text{Voltage}^{2}\times\text{Frequency}
\]

\end_inset


\end_layout

\begin_layout Itemize

\emph on
Power wall
\emph default
: cannot reduce voltage, cannot remove more heat.
\end_layout

\begin_layout Paragraph
Improving performance
\end_layout

\begin_layout Standard
Beyond the power wall:
\end_layout

\begin_layout Enumerate

\emph on
Fast, local store
\emph default
 (caches, better RAM).
\end_layout

\begin_layout Enumerate

\emph on
Concurrent execution
\emph default
 (superscalar, pipelining, multi-threading).
\end_layout

\begin_layout Enumerate

\emph on
Domain-specific, direct hardware implementations
\emph default
 (FPGAs, no fetch/decode).
\end_layout

\begin_layout Enumerate

\emph on
Multiprocessors
\emph default
 (e.g.
 GPUs).
\end_layout

\begin_layout Enumerate

\emph on
Asynchronous designs
\emph default
 (no global clock).
\end_layout

\begin_layout Paragraph
Evaluating performance
\end_layout

\begin_layout Enumerate
Actual target workload.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Representative.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Specific/non-portable.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Difficult to measure.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Hard to idenitify.
\end_layout

\end_deeper
\begin_layout Enumerate
Full application benchmarks.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Portable.
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Widespread.
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Useful for improvement.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Less representative.
\end_layout

\end_deeper
\begin_layout Enumerate
Small kernal benchmarks.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Easy to use.
\end_layout

\begin_layout Itemize
\begin_inset Formula $+$
\end_inset

 Idenitify peak capability.
\end_layout

\begin_layout Itemize
\begin_inset Formula $-$
\end_inset

 Typically far away from typical performance.
\end_layout

\end_deeper
\begin_layout Section
Memory hierarchy
\end_layout

\begin_layout Paragraph
Locality principles
\end_layout

\begin_layout Itemize

\emph on
Temporal locality
\emph default
: recently used items tend to be used again soon.
\end_layout

\begin_deeper
\begin_layout Itemize
Guides cache replacement policy (what to replace when full).
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
Spatial locality
\emph default
: items close to recently used items tend to be used next.
\end_layout

\begin_deeper
\begin_layout Itemize
Fetch multiple pieces of data in one transaction.
\end_layout

\end_deeper
\begin_layout Paragraph
Cache operation
\end_layout

\begin_layout Standard
Cache organised in 
\emph on
blocks
\emph default
.
\end_layout

\begin_layout Itemize

\emph on
Cache hit
\emph default
: CPU finds required block in cache.
\end_layout

\begin_layout Itemize

\emph on
Cache miss
\emph default
: get data from miain memory.
\end_layout

\begin_layout Itemize

\emph on
Hit rate
\emph default
: ratio of cache access to total memory access.
\end_layout

\begin_layout Itemize

\emph on
Hit time
\emph default
: time to access cache + determine hit/miss.
\end_layout

\begin_layout Itemize

\emph on
Miss penalty
\emph default
: time to replace item in cache + transfer to CPU.
\end_layout

\begin_layout Paragraph
Common framework
\end_layout

\begin_layout Enumerate

\emph on
Plan
\emph default
 a block: can go in one / some / any place.
\end_layout

\begin_layout Enumerate

\emph on
Find
\emph default
 a block: by index / limited search / full search.
\end_layout

\begin_layout Enumerate

\emph on
Replace
\emph default
 a block: random / LRU.
\end_layout

\begin_layout Enumerate
If 
\emph on
writing
\emph default
 to a block: write through / write back.
\end_layout

\begin_layout Paragraph
Direct mapped cache
\end_layout

\begin_layout Standard
Each memory locn.
 mapped to one cache locn.
 (E.g.
 using 
\begin_inset Formula $\mod$
\end_inset

).
\end_layout

\begin_layout Standard
For a cache with 
\begin_inset Formula $2^{n}$
\end_inset

 blocks, each of size 
\begin_inset Formula $2^{m}$
\end_inset

 words:
\end_layout

\begin_layout Itemize
\begin_inset Formula $32-\left(n+m+2\right)$
\end_inset

 bits are used for the tag field.
\end_layout

\begin_layout Itemize
\begin_inset Formula $n$
\end_inset

 bits are used for the index.
\end_layout

\begin_layout Itemize
\begin_inset Formula $m$
\end_inset

 bits are used for the word within the block.
\end_layout

\begin_layout Itemize
\begin_inset Formula $2$
\end_inset

 bits are used for the byte offset.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/direct-mapped-cache.png
	width 100col%

\end_inset


\end_layout

\begin_layout Itemize
Larger blocks:
\end_layout

\begin_deeper
\begin_layout Itemize
Generally lower miss rate by exploiting spatial locality.
\end_layout

\begin_layout Itemize
Increases transfer time (miss penalty).
\end_layout

\begin_layout Itemize
If cache is small, too few blocks causes early eviction.
\end_layout

\end_deeper
\begin_layout Paragraph
Cache write policy
\end_layout

\begin_layout Standard
Needs to maintian cache coherency.
\end_layout

\begin_layout Enumerate

\emph on
Write through
\emph default
: write to both cache and memory.
\end_layout

\begin_deeper
\begin_layout Itemize
Memory write bandwidth can cause bottleneck.
\end_layout

\end_deeper
\begin_layout Enumerate

\emph on
Write back
\emph default
: write to cache only.
\end_layout

\begin_deeper
\begin_layout Itemize
Complex control, requires a dirty bit.
\end_layout

\begin_layout Itemize
Dirty entries must be flushed on eviction.
\end_layout

\end_deeper
\begin_layout Paragraph
Cache misses
\end_layout

\begin_layout Itemize

\emph on
Compulsory misses
\emph default
 (first access).
\end_layout

\begin_layout Itemize

\emph on
Capacity misses
\emph default
 (insufficient space).
\end_layout

\begin_layout Itemize

\emph on
Conflict misses
\emph default
 (rigid placement).
\end_layout

\begin_layout Standard

\emph on
Reducing misses
\emph default
:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/cache-design.png
	width 75col%

\end_inset


\end_layout

\begin_layout Standard

\emph on
Handling read miss
\emph default
es: 
\end_layout

\begin_layout Enumerate
Send the original PC value (PC - 4) to memory.
\end_layout

\begin_layout Enumerate
Instruct main memory to perform a read.
\end_layout

\begin_layout Enumerate
Write the cache entry.
\end_layout

\begin_layout Enumerate
Restart the instruction at the first step.
\end_layout

\begin_layout Standard

\emph on
Handling write miss
\emph default
es (write through): use a write buffer.
\end_layout

\begin_layout Itemize
Use a buffer to store data waiting to be written to memory.
\end_layout

\begin_layout Itemize
Memory ontroller writes buffer contents to memory.
\end_layout

\begin_layout Itemize
Stall if the buffer is saturated.
\end_layout

\begin_deeper
\begin_layout Itemize
Occurs if CPU cycle time short compared to memory speed, or 
\end_layout

\begin_layout Itemize
Possible solution: install a second-level (L2) cache.
\end_layout

\end_deeper
\begin_layout Paragraph
Cache performance
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\text{CPU time}=\left(\text{Execution cycles}+\text{Memory stall cycles}\right)\times\text{Cycle time}
\]

\end_inset


\begin_inset Formula 
\[
\text{Total stall cycles}=\text{Read stall cycles}+\text{Write stall cycles}
\]

\end_inset


\begin_inset Formula 
\[
\text{Read stall cycles}=\frac{\text{Reads}}{\text{Program}}\times\text{Read miss rate}\times\text{Read miss penalty (cycles)}
\]

\end_inset


\begin_inset Formula 
\begin{align*}
\text{Write stall cycles} & =\frac{\text{Writes}}{\text{Program}}\times\text{Write miss rate}\times\text{Write miss penalty (cycles)}\\
 & +\text{Write buffer stalls (when full)}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\text{Stall cycles} & =\text{Instruction count}\\
 & \times\left(\text{Instruction miss rate}+\text{Load/store frequency}\times\text{Data miss rate}\right)\\
 & \times\text{Miss penalty}
\end{align*}

\end_inset


\begin_inset Formula 
\[
\text{CPU cycles without stall}=\text{Instruction count}\times\text{CPI (no stall)}
\]

\end_inset


\begin_inset Formula 
\[
\text{CPU cycles with stall}=\text{CPU cycles without stall}+\text{Stall cycles}
\]

\end_inset


\begin_inset Formula 
\[
\text{\% of time stalled}=\frac{\text{Stall cycles}}{\text{CPU cycles with stall}}
\]

\end_inset


\end_layout

\begin_layout Itemize

\emph on
Lower CPI
\emph default
: stall cycles have a greater impact.
\end_layout

\begin_layout Itemize

\emph on
Lower clock time
\emph default
: increased miss penalty (in terms of cycles).
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\text{AMAT}_{\text{CPU}} & =\text{Hit time}_{\text{L1 cache}}\\
 & +\text{Miss Rate}_{\text{L1 cache}}\times(\text{Hit time}_{\text{L2 cache}}+\text{Miss Rate}_{\text{L2 cache}}\times\text{AMAT}_{\text{Mem}})
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph
Associative caches
\end_layout

\begin_layout Itemize

\emph on
Direct-mapped
\emph default
: simple, fast access, high miss rates.
\end_layout

\begin_layout Itemize

\emph on
Fully associative
\emph default
: costly, slower, low miss rates.
\end_layout

\begin_layout Itemize

\emph on
\begin_inset Formula $n$
\end_inset

-way set associative
\emph default
: each address maps to 
\begin_inset Formula $n$
\end_inset

 blocks.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/associative-cache.png
	width 90col%

\end_inset


\end_layout

\begin_layout Paragraph
Block replacement policy
\end_layout

\begin_layout Itemize

\emph on
LRU
\emph default
: replace least recently used block.
\end_layout

\begin_layout Itemize
As cache size increaases:
\end_layout

\begin_deeper
\begin_layout Itemize
Miss rate decreases.
\end_layout

\begin_layout Itemize
Advantage of LRU over random decrases.
\end_layout

\end_deeper
\begin_layout Section
Virtual memory
\end_layout

\begin_layout Standard
Use main memory as a 
\begin_inset Quotes eld
\end_inset

cache
\begin_inset Quotes erd
\end_inset

 for secondary memory.
\end_layout

\begin_layout Enumerate
Give each process the illusion of having its own memory.
\end_layout

\begin_layout Enumerate
Memory may be shared among multiple programs.
\end_layout

\begin_layout Enumerate
Can run programs too large for physical memeory.
\end_layout

\begin_layout Paragraph
Address translation
\end_layout

\begin_layout Standard

\emph on
Virtual memory addresses
\emph default
 are translated to 
\emph on
physical addresses
\emph default
:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/addr-translation.png
	width 80col%

\end_inset


\end_layout

\begin_layout Itemize

\emph on
Page
\emph default
: fixed-size block of virtual memory.
\end_layout

\begin_layout Itemize

\emph on
Page fault
\emph default
: virtual memory miss.
\end_layout

\begin_layout Itemize

\emph on
Relocation
\emph default
: virtual address can be mapped to any physical addr.
\end_layout

\begin_layout Paragraph
Page faults
\end_layout

\begin_layout Standard
Take millions of cycles to process:
\end_layout

\begin_layout Enumerate
Pages shoul be large enough to amortize high access times.
\end_layout

\begin_layout Enumerate
Flexible page placement to reduce page faults (e.g.
 using fully associative schemes).
\end_layout

\begin_layout Enumerate
Page faults handled in software, and quite costly algorithms can be used.
\end_layout

\begin_layout Enumerate
Write back is the only viable choice for write policy.
\end_layout

\begin_layout Paragraph
Translation Look-aside Buffer
\end_layout

\begin_layout Standard
On page fault, exception causes OS to make two memory accesses:
\end_layout

\begin_layout Enumerate
Use page table to locate required page in disk.
\end_layout

\begin_layout Enumerate
Place it somewhere in memory.
\end_layout

\begin_layout Standard
Solution: find virtual page number in TLB:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/tlb.png
	width 90col%

\end_inset


\end_layout

\begin_layout Itemize

\emph on
TLB hit
\emph default
: returns physical page addr.
\end_layout

\begin_layout Itemize

\emph on
TLB miss
\emph default
: load part of page table into TLB and retry.
\end_layout

\begin_layout Paragraph
TLBs and caches
\end_layout

\begin_layout Standard
Best scenario: physical address found in TLB is present in cache:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/tlb-and-cache.png
	width 90col%

\end_inset


\end_layout

\begin_layout Paragraph
TLB misses
\end_layout

\begin_layout Standard
Check valid bit of page table entry:
\end_layout

\begin_layout Itemize
If 1: copy physical page address to TLB, try again.
\end_layout

\begin_layout Itemize
If 0, throw exception, OS handles page fault.
\end_layout

\begin_deeper
\begin_layout Enumerate

\emph on
Cause register
\emph default
 indicates page fault, 
\emph on
EPC
\emph default
 stores address.
\end_layout

\begin_layout Enumerate
CPU switched to supervisor mode, disables further exceptions.
\end_layout

\begin_layout Enumerate
Save state of current process.
\end_layout

\begin_layout Enumerate
Find virtual address causing page fault (depends on instruction/data memory).
\end_layout

\begin_layout Enumerate
Look up page table entry to find disk location.
\end_layout

\begin_layout Enumerate
Choose a physical page to replace (if dirty, must be flushed to disk first).
\end_layout

\begin_layout Enumerate
Start a read to bring referenced page into the chosen physical page.
\end_layout

\begin_layout Enumerate
Run another process during data transfer.
\end_layout

\end_deeper
\begin_layout Section
Pipelining
\end_layout

\begin_layout Standard
Split hardware into stages, biggest delay determines clock period.
\end_layout

\begin_layout Enumerate
Need to store partial results and control for future stages.
\end_layout

\begin_layout Enumerate
Improves instruction throughput by increasing parallelism.
\end_layout

\begin_layout Enumerate
Increases latency for each instruction.
\end_layout

\begin_layout Paragraph
ISA design for pipelining
\end_layout

\begin_layout Enumerate

\emph on
Instructions same length
\emph default
: can easily fetch in one cycle and decode in the next.
\end_layout

\begin_layout Enumerate

\emph on
Few instruction formats
\emph default
: registers in the same place, so we can read the register file at the same
 time as working out the instr.
 type.
\end_layout

\begin_layout Enumerate

\emph on
Memory operands only in load/store
\emph default
: we can use execute stage to calculate address for memory access.
\end_layout

\begin_layout Enumerate

\emph on
Aligned memory access
\emph default
: only ever need one memory access, so this can be done in a single pipeline
 stage.
\end_layout

\begin_layout Enumerate

\emph on
Single result
\emph default
: writes at most one result, making forwarding simpler.
\end_layout

\begin_layout Paragraph
MIPS pipeline
\end_layout

\begin_layout Enumerate

\emph on
IF
\emph default
: instruction fetched from memory.
\end_layout

\begin_layout Enumerate

\emph on
ID
\emph default
: instruction deoded and registers read.
\end_layout

\begin_layout Enumerate

\emph on
EX
\emph default
: excute operation or calculate address.
\end_layout

\begin_layout Enumerate

\emph on
MEM
\emph default
: access memory operand.
\end_layout

\begin_layout Enumerate

\emph on
WB
\emph default
: write result back to register.
\end_layout

\begin_layout Paragraph
Hazards
\end_layout

\begin_layout Enumerate

\emph on
Structural hazard
\emph default
: combination of instructions not supported by hardware (required resource
 busy).
\end_layout

\begin_deeper
\begin_layout Itemize
E.g.
 MIPS pipeline with a single memory cannot do fetch and load/store at the
 same time.
\end_layout

\end_deeper
\begin_layout Enumerate

\emph on
Data hazard
\emph default
: data needed to execute the instruction is not yet available.
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
Forwarding
\emph default
: use the result as soon as it is computed (add extra connections in datapath).
\end_layout

\begin_layout Itemize
If the result must be passed backwards, then we must add a 
\emph on
pipeline stall
\emph default
 (bubble).
\end_layout

\end_deeper
\begin_layout Enumerate

\emph on
Control hazard
\emph default
: instruction that was fetched was not the one that was needed.
\end_layout

\begin_deeper
\begin_layout Enumerate

\emph on
Pipeline stall
\emph default
.
\end_layout

\begin_layout Enumerate

\emph on
Branch prediction
\emph default
.
\end_layout

\begin_layout Enumerate

\emph on
Delayed decision
\emph default
: have a branch delay slot.
\end_layout

\end_deeper
\begin_layout Paragraph
Data hazards in MIPS
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/data-hazard.png
	width 75col%

\end_inset


\end_layout

\begin_layout Enumerate
ID/EX source register = EX/MEM dest.
 register, given that the instruction at EX/MEM would write, and register
 is non-zero.
\end_layout

\begin_layout Enumerate
ID/EX source register = MEM/WB dest.
 register, given that the instruction at MEM/WB would write, and register
 is non-zero (only if no hazard for EX/MEM).
\end_layout

\begin_layout Enumerate
Forwarding between WB stage and ID/EX stage can happen directly through
 the register file.
\end_layout

\begin_layout Paragraph
Load-use data hazard in MIPS
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/load-use-hazard.png
	width 75col%

\end_inset


\end_layout

\begin_layout Standard
If instruction at ID/EX is load (reads memory), and the load destination
 register (
\family typewriter
Rt
\family default
) is a source register in IF/ID, 
\emph on
pipeline stall
\emph default
:
\end_layout

\begin_layout Enumerate
Prevent PC register from changing.
\end_layout

\begin_layout Enumerate
Prevent IF/ID pipelin register from changing.
\end_layout

\begin_layout Enumerate
Set EX, MEM and WB control fields to 0 (no-op).
\end_layout

\begin_layout Paragraph
Control hazards in MIPS
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename img/pipelined-datapath.png
	width 100col%

\end_inset


\end_layout

\begin_layout Enumerate

\emph on
Assume branch not taken
\emph default
: when a branch is taken, we flush IF, ID and EX stages of pipeline.
\end_layout

\begin_layout Enumerate

\emph on
Reduce branch delay
\emph default
: do a register comparison in ID stage (instead of using ALU in EX stage).
\end_layout

\begin_deeper
\begin_layout Itemize
Bypassed source opereands of a branch could come from ALU/MEM or MEM/WB,
 so new forwarding logic is required.
\end_layout

\begin_layout Itemize
If a branch directly follows an ALU instruction which produces an operand
 for the branch, pipeline stall still required.
\end_layout

\begin_layout Itemize
If a branch directly follows a load instruction which produces an operand
 for the branch, two stall cycles still required.
\end_layout

\end_deeper
\begin_layout Enumerate

\emph on
Dynamic branch prediction
\emph default
: use runtime information.
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
Branch prediction buffer
\emph default
: memory indexed by lower portion 0of address of branch instruction.
\end_layout

\begin_deeper
\begin_layout Itemize
Marks whether the branch was recently taken or not.
\end_layout

\begin_layout Itemize
Better: 2-bit prediction scheme.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate

\emph on
Branch delay slot
\emph default
: works well for short pipelines with one instruction per clock cycle.
\end_layout

\begin_layout Section
Exceptions and Interrupts
\end_layout

\begin_layout Standard
Unexpected events requiring change in flow of control.
\end_layout

\begin_layout Itemize

\emph on
Exception
\emph default
: internal signal.
\end_layout

\begin_layout Itemize

\emph on
Interrupt
\emph default
: external signal.
\end_layout

\begin_layout Paragraph
MIPS
\end_layout

\begin_layout Enumerate
Save the offending instruction in the EPC.
\end_layout

\begin_layout Enumerate
Set the cause register.
\end_layout

\begin_layout Enumerate
Jump to handler.
\end_layout

\begin_layout Paragraph
Other architectures
\end_layout

\begin_layout Standard
Use 
\emph on
vectored interrupts
\emph default
: handler address determined directly by cause register.
\end_layout

\begin_layout Paragraph
Handler
\end_layout

\begin_layout Standard
Can either:
\end_layout

\begin_layout Enumerate
Read cause register, transfer to relevant handler.
\end_layout

\begin_layout Enumerate
Take corrective action if restartable, use EPC to return.
\end_layout

\begin_layout Enumerate
Terminate program and report error using EPC, cause, ...
\end_layout

\begin_layout Paragraph
Exceptions in a pipeline
\end_layout

\begin_layout Standard
Similar to a mispredicted branch:
\end_layout

\begin_layout Enumerate
Complete previous instructions, but flush offending and subsequent instructions.
\end_layout

\begin_layout Enumerate
Set cause and EPC values.
\end_layout

\begin_layout Enumerate
Transfer control to handler.
\end_layout

\begin_layout Paragraph
Multiple exceptions
\end_layout

\begin_layout Enumerate

\emph on
Simple method
\emph default
: flush subsequent instructions: precise exceptions.
\end_layout

\begin_layout Enumerate
Complex pipelines may have multiple instructions per cycle, out-of-order
 completion, etc.
\end_layout

\end_body
\end_document
